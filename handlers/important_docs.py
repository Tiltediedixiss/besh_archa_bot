from aiogram import types
from aiogram.dispatcher import Dispatcher
from keyboards.important_docs_keyboard import important_docs_keyboard, back_to_docs_keyboard
from keyboards.mission_keyboard import (
    competencies_basic_watch_keyboard,
    competencies_mgmt_watch_keyboard,
)
from handlers.mission import VALUES_VIDEO_URL
from handlers.mission import COMPETENCIES_BASIC_VIDEO_URL, COMPETENCIES_MGMT_VIDEO_URL
from data.files import RULES_IMAGE_PATH
from data.files import BRANDBOOK_PDF_PATH
import os

def register_important_docs(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == "important_docs")
    async def important_docs(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üìÑ –í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=important_docs_keyboard()
        )

    # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ)
    @dp.callback_query_handler(lambda c: c.data == "important_values")
    async def important_values(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üì∫ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî —Ä–æ–ª–∏–∫:\n" + VALUES_VIDEO_URL,
            reply_markup=back_to_docs_keyboard()
        )

    # –†–æ–ª–∏–∫–∏ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö ‚Äî –¥–≤–∞ –≤–∏–¥–µ–æ
    @dp.callback_query_handler(lambda c: c.data == "important_competencies")
    async def important_competencies(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üì∫ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ‚Äî —Ä–æ–ª–∏–∫:\n" + COMPETENCIES_BASIC_VIDEO_URL
        )
        await callback_query.message.answer(
            "üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ‚Äî —Ä–æ–ª–∏–∫:\n" + COMPETENCIES_MGMT_VIDEO_URL,
            reply_markup=back_to_docs_keyboard()
        )

    # –ü–∞–º—è—Ç–∫–∞ 10 –ø—Ä–∞–≤–∏–ª ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç-–ø–∞–º—è—Ç–∫—É
    @dp.callback_query_handler(lambda c: c.data == "important_rules")
    async def important_rules(callback_query: types.CallbackQuery):
        if os.path.exists(RULES_IMAGE_PATH):
            with open(RULES_IMAGE_PATH, 'rb') as img:
                await callback_query.message.answer_photo(
                    img,
                    caption=(
                        "üìç –ü–æ–º–Ω–∏: –∫–∞—Å–∫–∞, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å. "
                        "–≠—Ç–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å."
                    )
                )
        else:
            await callback_query.message.answer(
                "üìç –ü–æ–º–Ω–∏: –∫–∞—Å–∫–∞, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å. –≠—Ç–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å."
            )
        await callback_query.message.answer(
            "–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –º–æ–∂–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
            reply_markup=back_to_docs_keyboard()
        )

    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É structure.png
    @dp.callback_query_handler(lambda c: c.data == "important_structure")
    async def important_structure(callback_query: types.CallbackQuery):
        path = os.path.join("data", "structure.png")
        if os.path.exists(path):
            with open(path, 'rb') as img:
                await callback_query.message.answer_photo(img, caption="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        else:
            await callback_query.message.answer("‚ùóÔ∏è–§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥:", reply_markup=back_to_docs_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "brandbook")
    async def send_brandbook_pdf(callback_query: types.CallbackQuery):
        if os.path.exists(BRANDBOOK_PDF_PATH):
            with open(BRANDBOOK_PDF_PATH, "rb") as pdf:
                await callback_query.message.answer_document(
                    pdf,
                    caption="–ë—Ä–µ–Ω–¥–±—É–∫ –∫–æ–º–ø–∞–Ω–∏–∏ '–ë–µ—à –ê—Ä—á–∞' (PDF)"
                )
        else:
            await callback_query.message.answer("‚ùóÔ∏è–§–∞–π–ª –±—Ä–µ–Ω–¥–±—É–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR.")
        await callback_query.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –±—Ä–µ–Ω–¥–±—É–∫ —Å–Ω–æ–≤–∞:",
            reply_markup=important_docs_keyboard()
        ) 