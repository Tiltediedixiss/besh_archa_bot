from aiogram import types
from aiogram.dispatcher import Dispatcher
from keyboards.company_info_keyboard import company_info_keyboard, corporate_culture_keyboard
from keyboards.main_menu import start_next_day_keyboard
from data.progress import progress_manager
from data.files import CORPORATE_ETHICS_PDF_PATH
import os


def register_company_info(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == "company_info")
    async def company_info(callback_query: types.CallbackQuery):
        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º media group –∏–∑ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–∞–∫ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö), —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
        photo_paths = ["data/1.jpg", "data/2.jpg", "data/3.jpg"]
        media_group = []
        import io
        try:
            from PIL import Image
            for path in photo_paths:
                if not os.path.exists(path):
                    continue
                with Image.open(path) as im:
                    im = im.convert("RGB")
                    width, height = im.size
                    max_side = 1600
                    scale = min(1.0, max_side / max(width, height))
                    if scale < 1.0:
                        new_size = (int(width * scale), int(height * scale))
                        im = im.resize(new_size, Image.LANCZOS)
                    buf = io.BytesIO()
                    im.save(buf, format="JPEG", quality=85, optimize=True)
                    buf.seek(0)
                    media_group.append(types.InputMediaPhoto(types.InputFile(buf, filename=os.path.basename(path))))
            if media_group:
                await callback_query.message.answer_media_group(media_group)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É (–∏–ª–∏ –Ω–µ—Ç Pillow), –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ –æ–¥–Ω–æ–º—É —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞–¥–µ–Ω–∏–µ–º
            max_photo_bytes = 10 * 1024 * 1024
            for path in photo_paths:
                if not os.path.exists(path):
                    continue
                try:
                    file_size = os.path.getsize(path)
                    if file_size > max_photo_bytes:
                        with open(path, "rb") as f:
                            await callback_query.message.answer_document(types.InputFile(f, filename=os.path.basename(path)))
                    else:
                        with open(path, "rb") as f:
                            await callback_query.message.answer_photo(types.InputFile(f))
                except Exception:
                    try:
                        with open(path, "rb") as f:
                            await callback_query.message.answer_document(types.InputFile(f, filename=os.path.basename(path)))
                    except Exception:
                        pass
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–ª–Ω—ã–π –∞–ª—å–±–æ–º
        await callback_query.message.answer(
            "–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
            "–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: https://disk.yandex.kz/d/ro9clH4yB1jhTQ"
        )
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        user_id = callback_query.from_user.id
        next_day = progress_manager.get_next_available_day(user_id)
        await callback_query.message.answer(
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É?",
            reply_markup=start_next_day_keyboard(next_day)
        )

    @dp.callback_query_handler(lambda c: c.data == "corporate_culture")
    async def corporate_culture(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üìö –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ö–æ–¥–µ–∫—Å–æ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '–ë–µ—à –ê—Ä—á–∞'.",
            reply_markup=corporate_culture_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "download_corporate_ethics")
    async def send_corporate_ethics_pdf(callback_query: types.CallbackQuery):
        if os.path.exists(CORPORATE_ETHICS_PDF_PATH):
            with open(CORPORATE_ETHICS_PDF_PATH, "rb") as pdf:
                await callback_query.message.answer_document(
                    pdf,
                    caption="–ö–æ–¥–µ–∫—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '–ë–µ—à –ê—Ä—á–∞' (PDF)"
                )
        else:
            await callback_query.message.answer("‚ùóÔ∏è–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR.")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
        await callback_query.message.answer(
            "–•–æ—Ç–∏—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±—Ä–µ–Ω–¥–±—É–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–∏?",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ë—Ä–µ–Ω–¥–±—É–∫—É", callback_data="brandbook"),
                types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="org_docs")
            )
        ) 