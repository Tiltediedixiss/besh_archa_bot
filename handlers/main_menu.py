from aiogram import types
from aiogram.dispatcher import Dispatcher
from keyboards.main_menu import main_menu_keyboard, smart_day_menu_keyboard
from data.progress import progress_manager
from keyboards.mission_keyboard import day2_intro_keyboard
from data.files import GOOD_JOB_STICKER_ID
from data.progress import progress_manager

def register_main_menu(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == "main_menu")
    async def main_menu(callback_query: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = callback_query.from_user.id
        await callback_query.message.edit_reply_markup(main_menu_keyboard(user_id))
    
    @dp.callback_query_handler(lambda c: c.data == "show_progress")
    async def show_progress(callback_query: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = callback_query.from_user.id
        progress = progress_manager.get_user_progress(user_id)
        
        summary = progress_manager.get_progress_summary(user_id)
        await callback_query.message.answer(summary, parse_mode='Markdown')
    
    # –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º *_completed, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ _start –ø–æ–≤—Ç–æ—Ä–Ω–æ
    
    @dp.callback_query_handler(lambda c: c.data.endswith("_locked"))
    async def show_locked_day(callback_query: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–Ω–µ"""
        day = int(callback_query.data.split("_")[1])
        await callback_query.message.answer(f"üîí –î–µ–Ω—å {day} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å.")
    
    @dp.callback_query_handler(lambda c: c.data.startswith("day_") and c.data.endswith("_start"))
    async def start_day(callback_query: types.CallbackQuery):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        user_id = callback_query.from_user.id
        day = int(callback_query.data.split("_")[1])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å —É—á–µ—Ç–æ–º 24—á –∑–∞–¥–µ—Ä–∂–∫–∏
        if not progress_manager.is_admin(user_id):
            progress = progress_manager.get_user_progress(user_id)
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
            if day > 1:
                prev_status = progress.get("day_progress", {}).get(f"day_{day-1}", {}).get("status")
                if prev_status != "completed":
                    await callback_query.message.answer("üîí –≠—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å.")
                    return
            # –ï—Å–ª–∏ –¥–µ–Ω—å –µ—â–µ locked ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è
            cur_status = progress.get("day_progress", {}).get(f"day_{day}", {}).get("status", "locked")
            if cur_status == "locked":
                remaining = progress_manager.get_remaining_wait_time(user_id, day)
                if remaining is not None and remaining > 0:
                    hours = remaining // 3600
                    minutes = (remaining % 3600) // 60
                    await callback_query.message.answer(
                        f"‚è≥ –≠—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours}—á {minutes}–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ."
                    )
                else:
                    await callback_query.message.answer("üîí –≠—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.")
                return

        # –ü–æ–º–µ—á–∞–µ–º –¥–µ–Ω—å –∫–∞–∫ –Ω–∞—á–∞—Ç—ã–π (–¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ–∂–µ –æ–±–Ω–æ–≤–∏–º started_at –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ)
        progress_manager.mark_day_started(user_id, day)
        
        # –î–ª—è –î–Ω—è 2 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç
        if day == 2:
            intro = (
                "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –°–µ–≥–æ–¥–Ω—è –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n"
                "–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–π–¥—ë–º —á—É—Ç—å –≥–ª—É–±–∂–µ ‚Äî –Ω–µ –≤ –∫–∞—Ä—å–µ—Ä, –∞ –≤ —Å–∞–º—É –¥—É—à—É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–¢–µ–±—è –∂–¥—ë—Ç:\n"
                "‚Äì –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ (–≤–∫–ª—é—á–∏ —Ä–æ–ª–∏–∫ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏)\n"
                "‚Äì –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (—Å–º–æ—Ç—Ä–∏ —Ä–æ–ª–∏–∫ –∏ –æ—Ç–º–µ—Ç—å, —á—Ç–æ —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –±–ª–∏–∑–∫–æ)\n"
                "‚Äì –í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ (–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π)\n\n"
                "–ü–æ–º–Ω–∏, –∫–∞–∂–¥—ã–π —à–∞–≥ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –∫–∏—Ä–ø–∏—á–∏–∫ –≤ —Ç–≤–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤ ¬´–ë–µ—à –ê—Ä—á–∞¬ª.\n"
                "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π ¬´–°—Ç–∞—Ä—Ç¬ª –∏ –≤–ø–µ—Ä—ë–¥!\n"
                "–ü–æ—Å—Ç–∞–≤—å —Å—Ç–∏–∫–µ—Ä –ê—Ä—á–∏ ‚Äì –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
            )
            try:
                await callback_query.message.answer_sticker(GOOD_JOB_STICKER_ID)
            except:
                pass
            await callback_query.message.answer(intro, reply_markup=day2_intro_keyboard())
            return

        # –î–ª—è –î–Ω—è 4 ‚Äî —Å–≤–æ—ë –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        if day == 4:
            from handlers.mission import day4_start
            await day4_start(callback_query)
            return

        # –î–ª—è –¥–Ω—è 1 –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å—Ä–∞–∑—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è CEO
        if day == 1:
            from handlers.ceo_greeting import start_ceo_greeting
            await start_ceo_greeting(callback_query.message, user_id)
            return
        # –î–ª—è –¥–Ω—è 3 –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –≤–≤–æ–¥–Ω—ã–π –±–ª–æ–∫
        if day == 3:
            from handlers.mission import day3_start
            await day3_start(callback_query)
            return

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –º–æ–¥—É–ª–µ–π
        await callback_query.message.answer(
            f"üìÖ *–î–µ–Ω—å {day} –∞–¥–∞–ø—Ç–∞—Ü–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=smart_day_menu_keyboard(user_id, day),
            parse_mode='Markdown'
        )
    
    @dp.callback_query_handler(lambda c: c.data.startswith("module_"))
    async def handle_module(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è"""
        user_id = callback_query.from_user.id
        parts = callback_query.data.split("_")
        day = int(parts[1])
        module = "_".join(parts[2:-1])  # –ú–æ–¥—É–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        if not progress_manager.can_access_day(user_id, day):
            await callback_query.message.answer("üîí –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if module == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞":
            from handlers.ceo_greeting import start_ceo_greeting
            await start_ceo_greeting(callback_query.message, user_id)
        elif module == "–õ–µ–≥–µ–Ω–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏":
            from handlers.legend import start_legend_module
            await start_legend_module(user_id, callback_query.message)
        elif module == "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è":
            from handlers.modern_history import start_modern_history_module
            await start_modern_history_module(callback_query.message, user_id)
        elif module == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏":
            from handlers.mission import values_ack
            await values_ack(callback_query)
        elif module == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏":
            from handlers.mission import competencies_ack
            await competencies_ack(callback_query)
        elif module == "–í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂":
            from handlers.mission import briefing_ack
            await briefing_ack(callback_query)
        else:
            await callback_query.message.answer(f"üìö –ú–æ–¥—É–ª—å '{module}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û –∫–æ–º–ø–∞–Ω–∏–∏" —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ handlers/company_info.py