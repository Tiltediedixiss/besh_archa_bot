import csv
from datetime import datetime
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.mission_keyboard import (
    day2_intro_keyboard,
    values_watch_keyboard,
    values_ack_keyboard,
    competencies_basic_watch_keyboard,
    competencies_basic_ack_keyboard,
    competencies_mgmt_watch_keyboard,
    competencies_mgmt_ack_keyboard,
    briefing_watch_keyboard,
    briefing_ack_keyboard,
    day3_intro_keyboard,
    day3_after_video_keyboard,
    day3_rules_keyboard,
    day3_faq_menu_keyboard,
    day3_faq_back_keyboard,
    day4_intro_keyboard,
    day4_ethics_ack_keyboard,
    day4_brandbook_keyboard,
    day4_brandbook_ack_keyboard,
    day4_news_keyboard,
    day4_docs_keyboard,
    day4_referral_keyboard,
    day4_feedback_keyboard,
)
from keyboards.important_docs_keyboard import important_docs_keyboard
from keyboards.company_info_keyboard import corporate_culture_keyboard
from data.files import CORPORATE_ETHICS_PDF_PATH, GOOD_JOB_STICKER_ID, INSTRUCTIONS_PDF_PATH, ASK_QUESTION_STICKER_ID, SAFETY_FIRST_STICKER_ID, DAY3_FAREWELL_STICKER_ID, RULES_IMAGE_PATH, BRANDBOOK_PDF_PATH
import os

# –î–µ–Ω—å 2: —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–ª–∏–∫–∏ (YouTube –ø—Ä–µ–≤—å—é)
VALUES_VIDEO_URL = "https://youtu.be/dClTK79sweQ"
COMPETENCIES_BASIC_VIDEO_URL = "https://youtu.be/jA3w7bzUMeo"  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ—Ç –∂–µ —Ä–æ–ª–∏–∫)
COMPETENCIES_MGMT_VIDEO_URL = "https://youtu.be/aMrCd1itH7U"   # –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏

CSV_FILE = "mission_ack.csv"

class MissionState(StatesGroup):
    language = State()

def register_mission(dp: Dispatcher):
    # –î–µ–Ω—å 2 ‚Äî –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ê—Ä—á–∏
    @dp.callback_query_handler(lambda c: c.data == "day_2_start")
    async def day2_entry(callback_query: types.CallbackQuery):
        text = (
            "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –°–µ–≥–æ–¥–Ω—è –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n"
            "–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–π–¥—ë–º —á—É—Ç—å –≥–ª—É–±–∂–µ ‚Äî –Ω–µ –≤ –∫–∞—Ä—å–µ—Ä, –∞ –≤ —Å–∞–º—É –¥—É—à—É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–¢–µ–±—è –∂–¥—ë—Ç:\n"
            "‚Äì –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ (–≤–∫–ª—é—á–∏ —Ä–æ–ª–∏–∫ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏)\n"
            "‚Äì –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (—Å–º–æ—Ç—Ä–∏ —Ä–æ–ª–∏–∫ –∏ –æ—Ç–º–µ—Ç—å, —á—Ç–æ —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –±–ª–∏–∑–∫–æ)\n"
            "‚Äì –í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ (–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π)\n\n"
            "–ü–æ–º–Ω–∏, –∫–∞–∂–¥—ã–π —à–∞–≥ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –∫–∏—Ä–ø–∏—á–∏–∫ –≤ —Ç–≤–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤ ¬´–ë–µ—à –ê—Ä—á–∞¬ª.\n"
            "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π ¬´–°—Ç–∞—Ä—Ç¬ª –∏ –≤–ø–µ—Ä—ë–¥!\n"
            "–ü–æ—Å—Ç–∞–≤—å —Å—Ç–∏–∫–µ—Ä –ê—Ä—á–∏ ‚Äì –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        )
        try:
            await callback_query.message.answer_sticker(GOOD_JOB_STICKER_ID)
        except:
            pass
        await callback_query.message.answer(text, reply_markup=day2_intro_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "day2_start")
    async def day2_start(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "–û–∑–Ω–∞–æ–∫–º—å—Å—è –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–º –æ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö –Ω–∞—à–µ–π –ö–æ–º–ø–∞–Ω–∏–∏", reply_markup=values_watch_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "values_video")
    async def values_video(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üì∫ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî —Ä–æ–ª–∏–∫:\n" + VALUES_VIDEO_URL
        )
        await callback_query.message.answer(
            "–ö–æ–≥–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–æ–ª–∏–∫, –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω¬ª.",
            reply_markup=values_ack_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "values_ack")
    async def values_ack(callback_query: types.CallbackQuery):
        # –û—Ç–º–µ—á–∞–µ–º –º–æ–¥—É–ª—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏", 2)
        await callback_query.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"
        )
        await callback_query.message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º —Ä–æ–ª–∏–∫ –ø—Ä–æ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.",
            reply_markup=competencies_basic_watch_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "competencies_video_basic")
    async def competencies_video_basic(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üì∫ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ‚Äî —Ä–æ–ª–∏–∫:\n" + COMPETENCIES_BASIC_VIDEO_URL
        )
        await callback_query.message.answer(
            "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω¬ª.",
            reply_markup=competencies_basic_ack_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "competencies_basic_ack")
    async def competencies_basic_ack(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "–¢–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º —Ä–æ–ª–∏–∫ –ø—Ä–æ –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.",
            reply_markup=competencies_mgmt_watch_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "competencies_video_mgmt")
    async def competencies_video_mgmt(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ‚Äî —Ä–æ–ª–∏–∫:\n" + COMPETENCIES_MGMT_VIDEO_URL
        )
        await callback_query.message.answer(
            "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω¬ª.",
            reply_markup=competencies_mgmt_ack_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "competencies_mgmt_ack")
    async def competencies_mgmt_ack(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", 2)
        await callback_query.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–º—É –±–ª–æ–∫—É –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è: –í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂.",
            reply_markup=briefing_watch_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "briefing_start")
    async def briefing_start(callback_query: types.CallbackQuery):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Å –≤–≤–æ–¥–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ–º
        import os
        if os.path.exists(INSTRUCTIONS_PDF_PATH):
            with open(INSTRUCTIONS_PDF_PATH, 'rb') as doc:
                await callback_query.message.answer_document(
                    doc,
                    caption="üìÑ –í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ (PDF)"
                )
        else:
            await callback_query.message.answer("‚ùóÔ∏è–§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR.")
        await callback_query.message.answer(
            "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω¬ª.",
            reply_markup=briefing_ack_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "briefing_ack")
    async def briefing_ack(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", 2)
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è 2 + —Å—Ç–∏–∫–µ—Ä
        farewell = (
            "–û—Ç–ª–∏—á–Ω–æ! \n"
            "–¢—ã —É–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –Ω–∞—à–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏.\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ ¬´–ë–µ—à –ê—Ä—á–∞¬ª ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —É–≥–æ–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∞, –Ω–æ –∏ –∫–æ–º–∞–Ω–¥–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –≤–∞–∂–µ–Ω, –≥–¥–µ —Ü–µ–Ω—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É.\n"
            "–≠—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã ‚Äî –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–º–ø–∞—Å. –î–µ—Ä–∂–∏ –µ–≥–æ –ø—Ä–∏ —Å–µ–±–µ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –∏ –æ–Ω –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–µ–¥—ë—Ç —Ç–µ–±—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.\n"
            "üìû –í–∞–∂–Ω–æ: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —è—Å–Ω–æ ‚Äî –Ω–µ –±–æ–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å. –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –î–æ –∑–∞–≤—Ç—Ä–∞! "
        )
        try:
            await callback_query.message.answer_sticker(ASK_QUESTION_STICKER_ID)
        except:
            pass
        await callback_query.message.answer(farewell)

    # ===== –î–µ–Ω—å 3 =====
    @dp.callback_query_handler(lambda c: c.data == "day_3_start")
    async def day3_start(callback_query: types.CallbackQuery):
        intro = (
            "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
            "–°–µ–≥–æ–¥–Ω—è –≥–æ–≤–æ—Ä–∏–º –æ —Å–∞–º–æ–º –≤–∞–∂–Ω–æ–º ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –±—ã—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.\n"
            "‚ö†Ô∏è –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –≥–ª–∞–≤–Ω–æ–µ. –ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∞ —Ç–µ–±—è, —Ç–≤–æ–∏—Ö –∫–æ–ª–ª–µ–≥ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
        )
        await callback_query.message.answer(intro, reply_markup=day3_intro_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "day3_watch_video")
    async def day3_watch_video(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "üé• –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω. –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É."
        )
        try:
            await callback_query.message.answer_sticker(SAFETY_FIRST_STICKER_ID)
        except:
            pass
        await callback_query.message.answer(
            "üìç –ü–æ–º–Ω–∏: –∫–∞—Å–∫–∞, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å. –≠—Ç–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å.",
            reply_markup=day3_after_video_keyboard()
        )
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", 3)

    @dp.callback_query_handler(lambda c: c.data == "day3_rules")
    async def day3_rules(callback_query: types.CallbackQuery):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–º—è—Ç–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ FAQ
        import os
        if os.path.exists(RULES_IMAGE_PATH):
            with open(RULES_IMAGE_PATH, 'rb') as img:
                await callback_query.message.answer_photo(
                    img,
                    caption=(
                        "üìç –ü–æ–º–Ω–∏: –∫–∞—Å–∫–∞, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å. "
                        "–≠—Ç–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å."
                    ),
                    reply_markup=day3_rules_keyboard()
                )
        else:
            await callback_query.message.answer(
                "üìç –ü–æ–º–Ω–∏: –∫–∞—Å–∫–∞, —Å–ø–µ—Ü–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å. "
                "–≠—Ç–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å.",
                reply_markup=day3_rules_keyboard()
            )
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–ü–∞–º—è—Ç–∫–∞ 10 –ø—Ä–∞–≤–∏–ª", 3)

    @dp.callback_query_handler(lambda c: c.data == "day3_download_rules")
    async def day3_download_rules(callback_query: types.CallbackQuery):
        # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤
        await day3_faq(callback_query)

    @dp.callback_query_handler(lambda c: c.data == "day3_faq")
    async def day3_faq(callback_query: types.CallbackQuery):
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É üëá",
            reply_markup=day3_faq_menu_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data.startswith("day3_faq_"))
    async def day3_faq_item(callback_query: types.CallbackQuery):
        mapping = {
            "day3_faq_loc": (
                "üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–∑—Ä–µ–∑ –∏ –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è?\n"
                "–†–∞–∑—Ä–µ–∑ ¬´–ë–µ—à –ê—Ä—á–∞¬ª —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ ___ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã). –î–æ–±—Ä–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –∞–≤—Ç–æ–±—É—Å–µ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ) –∏–ª–∏ –ª–∏—á–Ω—ã–º –∞–≤—Ç–æ —á–µ—Ä–µ–∑ –ö–ü–ü ‚Ññ1."
            ),
            "day3_faq_schedule": (
                "‚è∞ –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?\n"
                "–°–º–µ–Ω—ã ‚Äî –¥–µ–Ω—å/–Ω–æ—á—å –ø–æ 12 —á–∞—Å–æ–≤, –æ—Ñ–∏—Å ‚Äî —Å 09:00 –¥–æ 18:00, –ø–Ω‚Äì–ø—Ç."
            ),
            "day3_faq_pass": (
                "ü™™ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫?\n"
                "–ß–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞ –∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞."
            ),
            "day3_faq_gear": (
                "üëï –ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–æ–¥–µ–∂–¥—É?\n"
                "–ù–∞ —Å–∫–ª–∞–¥–µ –°–ò–ó ‚Ññ___ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞ –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞."
            ),
            "day3_faq_canteen": (
                "üç≤ –ï—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–æ–≤–∞—è?\n"
                "–î–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≥—Ä–∞—Ñ–∏–∫—É."
            ),
            "day3_faq_housing": (
                "üè¢ –ñ–∏–ª—å—ë –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                "–î–ª—è –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤ ‚Äî –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ 2‚Äì4 —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≤–∞—Ö—Ç–æ–≤–æ–º –ø–æ—Å—ë–ª–∫–µ."
            ),
            "day3_faq_med": (
                "ü©∫ –ú–µ–¥–ø—É–Ω–∫—Ç\n"
                "–ú–µ–¥–ø—É–Ω–∫—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤–∞—Ö—Ç–æ–≤–æ–≥–æ –ø–æ—Å–µ–ª–∫–∞."
            ),
            "day3_faq_contacts": (
                "ü©∫ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
                "+996 773 433 343\n"
                "info@besharcha.kg\n"
                "–ì–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å\n"
                "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω, –ë–∏—à–∫–µ–∫, –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π —Ä-–Ω, —É–ª. –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, –¥. 178, –∫–∞–±. 805 (8-–π —ç—Ç–∞–∂)"
            ),
        }
        text = mapping.get(callback_query.data, "")
        if text:
            await callback_query.message.answer(text, reply_markup=day3_faq_back_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "day3_finish")
    async def day3_finish(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "FAQ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", 3)
        farewell = (
            "–ù—É —á—Ç–æ, –¥—Ä—É–≥, —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å ‚Äî –ø–æ–∑–∞–¥–∏! \n"
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∑–Ω–∞–ª, –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ —É –Ω–∞—Å –≤ ¬´–ë–µ—à –ê—Ä—á–∞¬ª ‚Äî –≥–¥–µ –∂–∏–≤—ë–º, –∫–∞–∫ –¥–æ–±–∏—Ä–∞–µ–º—Å—è, –≥–¥–µ –ø–æ–µ—Å—Ç—å, –≥–¥–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –∫ –∫–æ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –±—ã—Ç ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–±–æ—Ç.\n\n"
            "–í–ø–µ—Ä–µ–¥–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.\n\n"
            "–î–æ –∑–∞–≤—Ç—Ä–∞, —Ç–≤–æ–π –ê—Ä—á–∏! \n"
        )
        try:
            await callback_query.message.answer_sticker(DAY3_FAREWELL_STICKER_ID)
        except:
            pass
        await callback_query.message.answer(farewell)

    # ===== –î–µ–Ω—å 4 =====
    @dp.callback_query_handler(lambda c: c.data == "day_4_start")
    async def day4_start(callback_query: types.CallbackQuery):
        text = (
            "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –°–µ–≥–æ–¥–Ω—è —á–µ—Ç–≤–µ—Ä—Ç—ã–π –¥–µ–Ω—å –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
            "–ú—ã –æ—Ç–∫—Ä–æ–µ–º –¥–ª—è —Ç–µ–±—è –µ—â—ë –æ–¥–Ω—É –≤–∞–∂–Ω—É—é —á–∞—Å—Ç—å –∂–∏–∑–Ω–∏ ¬´–ë–µ—à –ê—Ä—á–∞¬ª ‚Äî –Ω–∞—à—É –∫—É–ª—å—Ç—É—Ä—É –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n"
            "–ó–¥–µ—Å—å —Ç—ã —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–ª–µ–≥–∞–º–∏, –∞ –∫–æ–º–∞–Ω–¥–æ–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –∏–¥—ë—Ç –∫ —Ü–µ–ª—è–º –≤–º–µ—Å—Ç–µ.\n\n"
            "ü§ù –£ –Ω–∞—Å –ø—Ä–∏–Ω—è—Ç–æ:\n"
            "‚Äì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n"
            "‚Äì –ë—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º–∏\n"
            "‚Äì –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Äì –ü–æ–º–Ω–∏—Ç—å, —á—Ç–æ –º—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞"
        )
        await callback_query.message.answer(text, reply_markup=day4_intro_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "day4_ethics")
    async def day4_ethics(callback_query: types.CallbackQuery):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–æ–¥–µ–∫—Å–∞ –∏ –∫–Ω–æ–ø–∫—É "–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω"
        if os.path.exists(CORPORATE_ETHICS_PDF_PATH):
            with open(CORPORATE_ETHICS_PDF_PATH, "rb") as pdf:
                await callback_query.message.answer_document(
                    pdf, caption="–ö–æ–¥–µ–∫—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏ (PDF)"
                )
        else:
            await callback_query.message.answer("‚ùóÔ∏è–§–∞–π–ª –∫–æ–¥–µ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.message.answer(
            "–ù–∞–∂–º–∏ ¬´–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω¬ª, –∫–æ–≥–¥–∞ –∏–∑—É—á–∏—à—å –¥–æ–∫—É–º–µ–Ω—Ç.",
            reply_markup=day4_ethics_ack_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "day4_ethics_ack")
    async def day4_ethics_ack(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–ö–æ–¥–µ–∫—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏", 4)
        await callback_query.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –±—Ä–µ–Ω–¥–±—É–∫ –∫–æ–º–ø–∞–Ω–∏–∏.",
            reply_markup=day4_brandbook_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "day4_brandbook")
    async def day4_brandbook(callback_query: types.CallbackQuery):
        if os.path.exists(BRANDBOOK_PDF_PATH):
            with open(BRANDBOOK_PDF_PATH, "rb") as pdf:
                await callback_query.message.answer_document(
                    pdf, caption="–ë—Ä–µ–Ω–¥–±—É–∫ –∫–æ–º–ø–∞–Ω–∏–∏ (PDF)"
                )
        else:
            await callback_query.message.answer("‚ùóÔ∏è–§–∞–π–ª –±—Ä–µ–Ω–¥–±—É–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.message.answer(
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ ¬´–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω¬ª.",
            reply_markup=day4_brandbook_ack_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "day4_brandbook_ack")
    async def day4_brandbook_ack(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–ë—Ä–µ–Ω–¥–±—É–∫", 4)
        await callback_query.message.answer(
            "–û –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –ö–æ–º–ø–∞–Ω–∏–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª. –ú–æ–∂–µ—à—å —á–∞—Å—Ç–æ —Ç—É–¥–∞ –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å.",
            reply_markup=day4_news_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "day4_docs")
    async def day4_docs(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è", 4)
        await callback_query.message.answer(
            "–í —Ä–∞–∑–¥–µ–ª–µ ¬´–í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª —Ç—ã –Ω–∞–π–¥—ë—à—å –æ—Ä–≥—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∏ –¥—Ä—É–≥–æ–µ (PDF).",
            reply_markup=day4_docs_keyboard()
        )

    @dp.callback_query_handler(lambda c: c.data == "day4_referral")
    async def day4_referral(callback_query: types.CallbackQuery):
        from data.progress import progress_manager
        progress_manager.update_module_progress(callback_query.from_user.id, "–í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", 4)
        progress_manager.update_module_progress(callback_query.from_user.id, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", 4)
        text = (
            "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ó–∞ —ç—Ç–∏ –¥–Ω–∏ —Ç—ã —É–∑–Ω–∞–ª, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω ¬´–ë–µ—à –ê—Ä—á–∞¬ª ‚Äî –æ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ –±—ã—Ç–∞, –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.\n"
            "–¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å, –≥–¥–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –∫ –∫–æ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è –Ω–∞ —Å–º–µ–Ω–µ –∏ –∫–∞–∫ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ç—ã —Å—Ç–∞–ª –±–ª–∏–∂–µ –∫ –ª—é–¥—è–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥.\n\n"
            "–°–µ–≥–æ–¥–Ω—è —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n\n"
            "üìå –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "‚Äî –û—Ç–ø—Ä–∞–≤—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ HR-–±–æ—Ç–µ.\n"
            "‚Äî –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É ‚Äî —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å.\n\n"
            "üèÜ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª–µ–π\n\n"
            "üîç –ö–æ–≥–æ –º—ã –∏—â–µ–º? (—Å–º–æ—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª –í–∞–∫–∞–Ω—Å–∏–∏)"
        )
        await callback_query.message.answer(text, reply_markup=day4_referral_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "vacancies_info")
    async def vacancies_info(callback_query: types.CallbackQuery):
        await callback_query.message.answer("–†–∞–∑–¥–µ–ª –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ HR –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

    @dp.callback_query_handler(lambda c: c.data == "day4_feedback")
    async def day4_feedback(callback_query: types.CallbackQuery):
        text = (
            "–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç–≤–æ—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è.\n"
            "–ß—Ç–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
            "–ü–æ–¥–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –µ—â—ë –ª—É—á—à–µ.\n\n"
            "üìù –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "‚Ä¢ –ß—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ —á–∞—Ç-–±–æ—Ç–∞?\n"
            "‚Ä¢ –ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —à–∞–≥–∏ —Ç—ã –±—ã –¥–æ–±–∞–≤–∏–ª?"
        )
        await callback_query.message.answer(text, reply_markup=day4_feedback_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "day4_feedback_start")
    async def day4_feedback_start(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —è –µ–≥–æ –ø–µ—Ä–µ–¥–∞–º HR.")
        await state.set_state("waiting_feedback")

    @dp.message_handler(state="waiting_feedback")
    async def day4_feedback_collect(message: types.Message, state: FSMContext):
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ CSV –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        with open("feedback_day4.csv", "a", newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([message.from_user.id, message.from_user.full_name, message.text, datetime.now().isoformat()])
        from data.progress import progress_manager
        progress_manager.update_module_progress(message.from_user.id, "–û—Ç–∑—ã–≤ –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏", 4)
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à—ë–ª –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã ‚Äî —á–∞—Å—Ç—å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã üíõ\n"
            "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–¥–µ—Å—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ —Å–º—ã—Å–ª, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: info@besharcha.kg"
        )
        await state.finish()